<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script
      type="text/javascript"
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQUu01hvcUZo14XTn4dqKqW2sNG_fpGik"
    ></script>
    <link rel="stylesheet" href="./components/css/style.css" />
  </head>
  <body>
    <div id="map"></div>
  </body>
  <script>
    var map

    function initMap() {
      var map = new google.maps.Map(document.getElementById('map'), {
        center: {
          lat: 49.24966,
          lng: -123.119339,
        },
        zoom: 10,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        disableDefaultUI: true,
      })
      console.log('hello')
      var myMapType = new google.maps.ImageMapType({
        getTileUrl: function (coord, zoom) {
          var normalizedCoord = getNormalizedCoord(coord, zoom)
          if (!normalizedCoord) {
            return null
          }
          var bound = Math.pow(2, zoom)
          return (
            'https://tile.openweathermap.org/map/clouds_new/' +
            zoom +
            '/' +
            normalizedCoord.x +
            '/' +
            (bound - normalizedCoord.y - 1) +
            '.png?appid=447d701d9ad0f211a520848054cbe752'
          )
        },
        tileSize: new google.maps.Size(256, 256),
        maxZoom: 8,
        minZoom: 0,
        name: 'mymaptype',
      })

      // Normalizes the coords that tiles repeat across the x axis (horizontally)
      // like the standard Google map tiles.
      function getNormalizedCoord(coord, zoom) {
        var y = coord.y
        var x = coord.x

        // tile range in one direction range is dependent on zoom level
        // 0 = 1 tile, 1 = 2 tiles, 2 = 4 tiles, 3 = 8 tiles, etc
        var tileRange = 1 << zoom

        // don't repeat across y-axis (vertically)
        if (y < 0 || y >= tileRange) {
          return null
        }

        // repeat across x-axis
        if (x < 0 || x >= tileRange) {
          x = ((x % tileRange) + tileRange) % tileRange
        }

        return {
          x: x,
          y: y,
        }
      }

      map.overlayMapTypes.insertAt(0, myMapType)
    }

    initMap()
  </script>
</html>


// console.log('WORLD')
// fetch('../backend/iso-country-alpha2.json')
//   .then((res) => res.json())
//   .then((data) => {
//     //   data.sort((a, b) => {
//     //     return b.stat.population - a.stat.population
//     //   })
//     //   const x = data.filter((value) => {
//     //     // console.log(value.country)
//     //     return value.country === 'US'
//     //   })
//     console.log(data)
//     // console.log(x)
//   })

// console.log('START')


// console.log('WORLD')
// fetch('./world-cities.json')
//   .then((res) => res.json())
//   .then((data) => {
//     //   data.sort((a, b) => {
//     //     return b.stat.population - a.stat.population
//     //   })
//     //   const x = data.filter((value) => {
//     //     // console.log(value.country)
//     //     return value.country === 'US'
//     //   })
//     console.log(data)
//     // console.log(x)
//   })




// Call current weather data for several cities
const height = 5
const width = 5
const zoom = 1
const bbox = [
  city.location.lng - width / 2,
  city.location.lat - height / 2,
  city.location.lng + width / 2,
  city.location.lat + height / 2,
  zoom,
]

fetch(
  `http://api.openweathermap.org/data/2.5/box/city?bbox=${bbox}&units=${units}&appid=${keyOpenWeather}`
)
  .then((res) => res.json())
  .then((data) => {
    console.log(data)
  })


// let unix_timestamp = 1554462304
let unix_timestamp = 1554462506
// Create a new JavaScript Date object based on the timestamp
// multiplied by 1000 so that the argument is in milliseconds, not seconds.
var date = new Date(unix_timestamp * 1000)
// Hours part from the timestamp
var hours = date.getHours()
// Minutes part from the timestamp
var minutes = '0' + date.getMinutes()
// Seconds part from the timestamp
var seconds = '0' + date.getSeconds()

// Will display time in 10:30:23 format
var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2)

console.log(formattedTime)

function timeConverter(UNIX_timestamp) {
  var a = new Date(UNIX_timestamp * 1000)
  var months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
  ]
  var year = a.getFullYear()
  var month = months[a.getMonth()]
  var date = a.getDate()
  var hour = a.getHours()
  var min = a.getMinutes()
  var sec = a.getSeconds()
  var time =
    date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec
  return time
}
console.log(timeConverter(1554462506))
console.log(timeConverter(1554462304))
